// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    password      String?   @db.Text
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    otp           String    @db.Text
    verified      Boolean   @default(false)
    notification  Boolean   @default(true)
    currency      Currency? @relation(fields: [currencyId], references: [id], onDelete: Cascade)
    currencyId    Int       @default(1)
    expense       Expense[]
    income        Income[]
    budget        Budget[]

    @@index([currencyId])
}

model Expense {
    id String @id @default(uuid())

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    categoryId Int

    description     String   @db.Text
    amount          Decimal  @db.Decimal(20, 2)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    imgUrl          String?
    transactionDate DateTime

    budget   Budget? @relation(fields: [budgetId], references: [id])
    budgetId String?

    @@index([userId])
    @@index([categoryId])
    @@index([budgetId])
}

model Income {
    id String @id @default(uuid())

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    title           String   @db.Text
    description     String   @db.Text
    amount          Decimal  @db.Decimal(20, 2)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    transactionDate DateTime

    @@index([userId])
}

model Budget {
    id     String @id @default(uuid())
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    endDate DateTime

    expense Expense[]

    category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    categoryId Int

    @@index([userId])
    @@index([categoryId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Currency {
    id     Int    @id @default(autoincrement())
    name   String @unique @db.VarChar(5)
    symbol String @db.VarChar(5)
    users  User[]
}

enum CurrencyType {
    MYR
    USD
    THAI
    JPY
    SGD
    GBP
    INR
    RUB
    KRW
    BTC
    THB
    VND
}

model Category {
    id      Int       @id @default(autoincrement())
    name    String?
    iconId  Int
    expense Expense[]
    Budget  Budget[]
}
