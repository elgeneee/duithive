// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id                  String         @id @default(cuid())
    name                String?
    email               String?        @unique
    emailVerified       DateTime?
    image               String?
    accounts            Account[]
    sessions            Session[]
    password            String?        @db.Text
    createdAt           DateTime       @default(now())
    updatedAt           DateTime       @updatedAt
    otp                 String?        @db.Text
    verified            Boolean        @default(false)
    notification        Boolean        @default(true)
    currency            Currency?      @relation(fields: [currencyId], references: [id], onDelete: Cascade)
    currencyId          Int            @default(1)
    expense             Expense[]
    income              Income[]
    budget              Budget[]
    report              Report[]
    notifications       Notification[]
    batchCreate         BatchCreate[]
    monthlyReport       Boolean        @default(false)
    favoriteCategory1   Category?      @relation("favoriteCategory1", fields: [favoriteCategory1Id], references: [id], onDelete: Cascade)
    favoriteCategory1Id Int?
    favoriteCategory2   Category?      @relation("favoriteCategory2", fields: [favoriteCategory2Id], references: [id], onDelete: Cascade)
    favoriteCategory2Id Int?
    favoriteCategory3   Category?      @relation("favoriteCategory3", fields: [favoriteCategory3Id], references: [id], onDelete: Cascade)
    favoriteCategory3Id Int?

    @@index([currencyId])
    @@index([favoriteCategory1Id])
    @@index([favoriteCategory2Id])
    @@index([favoriteCategory3Id])
}

model Expense {
    id String @id @default(uuid())

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    categoryId Int

    description     String   @db.Text
    amount          Decimal  @db.Decimal(20, 2)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    imgUrl          String?
    transactionDate DateTime

    budgets Budget[]
    // budget   Budget? @relation(fields: [budgetId], references: [id])
    // budgetId String?

    @@index([userId])
    @@index([categoryId])
}

model Income {
    id String @id @default(uuid())

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    title           String   @db.Text
    description     String   @db.Text
    amount          Decimal  @db.Decimal(20, 2)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    transactionDate DateTime

    @@index([userId])
}

model Budget {
    id     String @id @default(uuid())
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    title  String  @db.Text
    amount Decimal @db.Decimal(20, 2)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    startDate DateTime
    endDate   DateTime

    category      Category?      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    categoryId    Int
    expenses      Expense[]
    notifications Notification[]

    @@index([userId])
    @@index([categoryId])
}

model Report {
    id        String   @id @default(uuid())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    createdAt DateTime @default(now())
    fileName  String   @db.Text
    url       String   @db.Text

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Currency {
    id     Int    @id @default(autoincrement())
    name   String @unique @db.VarChar(5)
    symbol String @db.VarChar(5)
    users  User[]
}

model Notification {
    id      String  @id @default(uuid())
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String
    message String  @db.Text
    read    Boolean @default(false)

    createdAt DateTime @default(now())
    // updatedAt DateTime @updatedAt

    notificationType NotificationType?
    budget           Budget?           @relation(fields: [budgetId], references: [id], onDelete: Cascade)
    budgetId         String?

    @@index([userId])
    @@index([budgetId])
}

enum CurrencyType {
    MYR
    USD
    THAI
    JPY
    SGD
    GBP
    INR
    RUB
    KRW
    BTC
    THB
    VND
}

enum NotificationType {
    BUDGETEXCEED
    BUDGETEXPIRED
    ANNOUNCEMENT
    MONTHLYREPORT
    OTHERS
}

enum BatchType {
    EXPENSE
    INCOME
}

model BatchCreate {
    id        String    @id @default(uuid())
    fileName  String    @db.Text
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    createdAt DateTime  @default(now())
    success   Int
    failed    Int
    type      BatchType

    @@index([userId])
}

model Category {
    id            Int       @id @default(autoincrement())
    name          String?
    iconId        Int
    expense       Expense[]
    Budget        Budget[]
    userFavorite1 User[]    @relation("favoriteCategory1")
    userFavorite2 User[]    @relation("favoriteCategory2")
    userFavorite3 User[]    @relation("favoriteCategory3")
}
